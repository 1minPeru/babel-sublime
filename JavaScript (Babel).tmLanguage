<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>js</string>
		<string>jsx</string>
		<string>babel</string>
		<string>es6</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!\s*/.*\b(node|js)$\n?</string>
	<key>name</key>
	<string>JavaScript (Babel)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#core</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>class-properties</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=(?:[_$a-zA-Z][$\w]*)(?:\s|/\*.*\*/)*(?:=|:|;|\n))</string>
					<key>end</key>
					<string>(?&lt;=;|\n)|(?=\s*})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literal-variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literal-operators</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literal-punctuation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&lt;!--|--&gt;)</string>
					<key>name</key>
					<string>comment.block.html.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(#!).*$\n?</string>
					<key>name</key>
					<string>comment.line.shebang.js</string>
				</dict>
			</array>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-function-label</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-label</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keyword-storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-for</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-punctuation</string>
				</dict>
			</array>
		</dict>
		<key>curly-brackets</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.group.curly.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>es7-decorators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (@)([_$a-zA-Z][$\w]*)\b</string>
					<key>name</key>
					<string>tag.decorator.js</string>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#es7-decorators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-assignment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-prototype</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-regexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-quasi</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-builtin</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-constructor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#round-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#square-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#curly-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-variable</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-annotation</key>
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>:</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.flowtype.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\s*(?:,|;|=|\)|\]|\}|\{|\n|\/\/))</string>
			<key>name</key>
			<string>meta.flowtype.variable.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#flowtype-tokens</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(interface|declare)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.declaration.flowtype.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=}|;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>flowtype-polymorph</key>
		<dict>
			<key>begin</key>
			<string>&lt;</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.flowtype.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>&gt;</string>
			<key>name</key>
			<string>meta.flowtype.polymorph.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#flowtype-tokens</string>
				</dict>
			</array>
		</dict>
		<key>flowtype-tokens</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:any|bool|boolean|mixed|number|string|void)\b</string>
					<key>name</key>
					<string>constant.other.primitve.flowtype.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\:)</string>
					<key>name</key>
					<string>punctuation.separator.flowtype.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\?|\||\&amp;|\*|\.\.\.|typeof)</string>
					<key>name</key>
					<string>keyword.operator.flowtype.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>variable.other.flowtype.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=:|=&gt;|\()\s*({)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.flowtype.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-tokens</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>&lt;</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.flowtype.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-tokens</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.flowtype.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.flowtype.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))(?:\s*(=&gt;))?</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-tokens</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>function-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>meta.group.parameters.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parameters-declaration</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function-right-side</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#flowtype-polymorph</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flowtype-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>jsx</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\(|\{|\[|,|&amp;&amp;|\|\||\?|:|=|=&gt;|\Wreturn|^return|^)\s*(?=&lt;)</string>
			<key>contentName</key>
			<string>meta.jsx.js</string>
			<key>end</key>
			<string>(?&lt;=/&gt;|&gt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-start</string>
				</dict>
			</array>
		</dict>
		<key>jsx-attribute-assignment</key>
		<dict>
			<key>match</key>
			<string>=</string>
			<key>name</key>
			<string>keyword.operator.assignment.jsx</string>
		</dict>
		<key>jsx-attribute-illegal</key>
		<dict>
			<key>match</key>
			<string>\S*</string>
			<key>name</key>
			<string>invalid.illegal.attribute.jsx</string>
		</dict>
		<key>jsx-attribute-name</key>
		<dict>
			<key>match</key>
			<string>[_$a-zA-Z][-$\w]*</string>
			<key>name</key>
			<string>entity.other.attribute-name.jsx</string>
		</dict>
		<key>jsx-attributes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-attribute-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-attribute-assignment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-attribute-illegal</string>
				</dict>
			</array>
		</dict>
		<key>jsx-entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>&amp;(?:[a-zA-Z0-9]+|#\d+|#x\h+);</string>
					<key>name</key>
					<string>constant.character.entity.jsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;\S*;</string>
					<key>name</key>
					<string>invalid.illegal.bad-ampersand.jsx</string>
				</dict>
			</array>
		</dict>
		<key>jsx-evaluated-code</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.jsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.embedded.expression.jsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>jsx-string-quoted</key>
		<dict>
			<key>begin</key>
			<string>(["'])</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.jsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\1)</string>
			<key>name</key>
			<string>string.quoted.jsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-end</key>
		<dict>
			<key>begin</key>
			<string>&gt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.jsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=&lt;/)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-start</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-start</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(&lt;)([_$a-zA-Z][-$:.\w]*[$\w]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.jsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(&lt;/)(\2)(&gt;)|(/&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.jsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.jsx</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-tag-end</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-attributes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;</string>
					<key>name</key>
					<string>invalid.illegal.tag.incomplete.jsx</string>
				</dict>
			</array>
		</dict>
		<key>literal-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(class)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\b(extends)\b</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>storage.type.extends.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?={)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#flowtype-polymorph</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>\b([_$a-zA-Z][$\w]*)\b</string>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorph</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.class.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>name</key>
							<string>meta.class.js</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-function-storage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#class-properties</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#short-method</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#curly-brackets</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#es7-decorators</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-constructor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(new)\s+(?=[_$a-zA-Z][$\w.]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.new.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?![_$a-zA-Z][$\w.]*)</string>
					<key>name</key>
					<string>meta.instance.constructor</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#support</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>variable.function.constructor.js</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([_$a-zA-Z][$\w.]*\.)?([_$a-zA-Z][$\w]*)</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-for</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(for)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.for.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.round.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#literal-keyword-storage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-punctuation</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(function)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s*{|;|\n)</string>
					<key>name</key>
					<string>meta.function.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\*</string>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[_$a-zA-Z][$\w]*</string>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-polymorph</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.function.arrow.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\))\s*(?&gt;:|=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.async.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#flowtype-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-assignment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_$a-zA-Z][$\w]*)
  (?=
    \s*=
    \s*(?:async\s+)?
    (?:
      \b(?:function)\b|
      (?:(?:[_$a-zA-Z][$\w]*|(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\)))\s*(?&gt;:|=&gt;))
    )
  )</string>
					<key>name</key>
					<string>meta.function.assignment.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-function-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_$a-zA-Z][$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.without-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_$a-zA-Z][$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.with-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)\s*(?=`)</string>
					<key>name</key>
					<string>meta.function-call.tagged-template-string.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-function-label</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.quoted.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:([_$a-zA-Z][$\w]*)|((["'])((?:\\.|(?!\3).)*)(\3)))\s*(:)
  (?=
    \s*(?:async\s+)?
    (?:
      \b(?:function)\b|
      (?:(?:[_$a-zA-Z][$\w]*|(\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\)))\s*(?&gt;:|=&gt;))
    )
  )</string>
					<key>name</key>
					<string>meta.function.label.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-function-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(static)\b</string>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(get|set)\b(?!\s*\()</string>
					<key>name</key>
					<string>storage.type.property.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(async)\b</string>
					<key>name</key>
					<string>storage.type.async.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-keyword-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(const|let|var)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|\n)</string>
					<key>name</key>
					<string>meta.variable.declaration.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-annotation</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\[</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.destructure.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\]</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.destructure.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?==)</string>
							<key>end</key>
							<string>(?=,|;|\n)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(await|yield)\b(?:\s*(\*))?</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;return)\b</string>
					<key>name</key>
					<string>keyword.control.flow.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;if|else)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;catch|finally|throw|try)\b</string>
					<key>name</key>
					<string>keyword.control.trycatch.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;break|continue|do|goto|while)\b</string>
					<key>name</key>
					<string>keyword.control.loop.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(debugger)\b</string>
					<key>name</key>
					<string>keyword.other.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-label</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&lt;!\?)(?&lt;!\?\s)(?=(
    ((')((?:[^']|\\')*)('))|
    ((")((?:[^"]|\\")*)("))
  )\s*:)</string>
					<key>end</key>
					<string>:</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#literal-string</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.label.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\?|\?\s)([_$a-zA-Z][$\w]*)\s*(:)</string>
					<key>name</key>
					<string>constant.other.object.key.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-builtin</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(?&gt;arguments|self|super|this)\b</string>
					<key>name</key>
					<string>variable.language.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(?&gt;__proto__|constructor|prototype)\b</string>
					<key>name</key>
					<string>variable.language.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;true|false|null|undefined|NaN)\b</string>
					<key>name</key>
					<string>constant.language.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-method</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)(?=
  (?:\b
    (?:async|\*|get|set)            # storage
    (?:\s|/\*.*\*/)+                # some gap
  )?
  (?:                               # es6 short-method identifier:
    (["'])(?:\\.|(?!\1).)*\1      | # string quoted
    (?:\b[_$a-zA-Z][$\w]*\b)      | # any identifier
    (?:\b\d+\b)                   | # number-only name
    (\[(?:(?&gt;[^\[\]]+)|\g&lt;-1&gt;)*\])  # balanced brackets (computed name)
  )
  (?:\s|/\*.*\*/)*                  # maybe gap
  (&lt;(?:(?&gt;[^&lt;&gt;]+)|\g&lt;-1&gt;)*&gt;)?       # balanced angle brackets (flow polymorph)
  (?:\s|/\*.*\*/)*                  # maybe gap
  (\((?:(?&gt;[^()]+)|\g&lt;-1&gt;)*\))      # balanced parens (arguments)
  (?:\s|/\*.*\*/)*                  # maybe gap
  (?:[:|{])                         # flowtype-annotation or function body
)</string>
					<key>end</key>
					<string>(?&lt;=})</string>
					<key>name</key>
					<string>meta.method.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#short-method</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#curly-brackets</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-method-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:(?&lt;=\.)|\b)
  ([A-Z][$\w]*)\s*(\.)
  ([_$a-zA-Z][$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.static.without-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:(?&lt;=\.)|\b)
  ([A-Z][$\w]*)\s*(\.)
  ([_$a-zA-Z][$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.static.with-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;=\.)
  ([_$a-zA-Z][$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.method.without-arguments.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;=\.)
  ([_$a-zA-Z][$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.method.with-arguments.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-module</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;import|export|default|from|as)\b</string>
					<key>name</key>
					<string>keyword.operator.module.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.hex.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.octal.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?xi)
  (?:\B[-+])?
  (?:
    \b0b[0-1]*|                 # binary
    \b0o[0-7]*|                 # octal
    \b0x[0-9a-f]*|              # hex
    (
      \B\.[0-9]+|               # e.g. .999
      \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
    )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
  )</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)(Infinity)\b</string>
					<key>name</key>
					<string>constant.language.infinity.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>=&gt;</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(?&gt;delete|instanceof|in|new|of|typeof|void|with)\b</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  !(?!=)| # logical-not     right-to-left   right
  &amp;&amp;    | # logical-and     left-to-right   both
  \|\|  | # logical-or      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.logical.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  =(?!=)| # assignment      right-to-left   both</string>
					<key>name</key>
					<string>keyword.operator.assignment.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  %=   | # assignment      right-to-left   both
  &amp;=   | # assignment      right-to-left   both
  \*=  | # assignment      right-to-left   both
  \+=  | # assignment      right-to-left   both
  -=   | # assignment      right-to-left   both
  /=   | # assignment      right-to-left   both
  \^=  | # assignment      right-to-left   both
  \|=  | # assignment      right-to-left   both
  &lt;&lt;=  | # assignment      right-to-left   both
  &gt;&gt;=  | # assignment      right-to-left   both
  &gt;&gt;&gt;= | # assignment      right-to-left   both</string>
					<key>name</key>
					<string>keyword.operator.assignment.augmented.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ~    | # bitwise-not     right-to-left   right
  &lt;&lt;   | # bitwise-shift   left-to-right   both
  &gt;&gt;&gt;  | # bitwise-shift   left-to-right   both
  &gt;&gt;   | # bitwise-shift   left-to-right   both
  &amp;    | # bitwise-and     left-to-right   both
  \^   | # bitwise-xor     left-to-right   both
  \|     # bitwise-or      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.bitwise.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  &lt;=   | # relational      left-to-right   both
  &gt;=   | # relational      left-to-right   both
  &lt;    | # relational      left-to-right   both
  &gt;      # relational      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.relational.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ===  | # equality        left-to-right   both
  !==  | # equality        left-to-right   both
  ==   | # equality        left-to-right   both
  !=     # equality        left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.comparison.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  --   | # decrement       n/a             right-or-left
  \+\+ | # increment       n/a             right-or-left
  /    | # division        left-to-right   both
  %    | # modulus         left-to-right   both
  \*   | # multiplication  left-to-right   both
  \+   | # addition        left-to-right   both
  -      # subtraction     left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\?|:</string>
					<key>name</key>
					<string>keyword.operator.ternary.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\.\.\.</string>
					<key>name</key>
					<string>keyword.operator.spread.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>keyword.operator.accessor.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-prototype</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(_?[A-Z][$\w]*)(?=(?:\.[_$a-zA-Z][$\w]*|\.prototype\.[_$a-zA-Z][$\w]*)\s*=)</string>
					<key>name</key>
					<string>meta.function.class.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.comma.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-quasi</key>
		<dict>
			<key>begin</key>
			<string>`</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.quasi.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-content</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\`</string>
					<key>name</key>
					<string>constant.character.escape.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\${</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.interpolate.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>.</string>
					<key>name</key>
					<string>string.quasi.js</string>
				</dict>
			</array>
		</dict>
		<key>literal-regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&lt;=
    \.|\(|,|{|}|\[|;|,|&lt;|&gt;|&lt;=|&gt;=|==|!=|===|!==|\+|-|\*|%|\+\+|--|&lt;&lt;|&gt;&gt;|&gt;&gt;&gt;|&amp;|\||\^|!|~|&amp;&amp;|\|\||\?|:|=|\+=|-=|\*=|%=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&amp;=|\|=|\^=|/|/=|
    \Wnew|\Wdelete|\Wvoid|\Wtypeof|\Winstanceof|\Win|\Wdo|\Wreturn|\Wcase|\Wthrow|
    ^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw|^
  )\s*
  (/)
  (?!/|\*|$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(/)([gimy]*)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.regexp.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(["'])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\1)|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-switch</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(switch)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.switch.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.switch.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#round-brackets</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.curly.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(?&lt;!\.)\b(case|default)\b</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.control.switch.js</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=:)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#expression</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[A-Z][_$\dA-Z]*\b</string>
					<key>name</key>
					<string>variable.other.constant.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;!\.)\b(_?[A-Z][$\w]*)(?=\s*\.[_$a-zA-Z][$\w]*)</string>
					<key>name</key>
					<string>meta.property.class.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)([_$a-zA-Z][$\w]*)\s*(?=[\[\.])</string>
					<key>name</key>
					<string>variable.other.object.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=\.)\s*([_$a-zA-Z][$\w]*)</string>
					<key>name</key>
					<string>meta.property.object.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>variable.other.readwrite.js</string>
				</dict>
			</array>
		</dict>
		<key>parameters-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>variable.parameter.function.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[=])</string>
					<key>end</key>
					<string>(?=[,)}\]])</string>
					<key>name</key>
					<string>meta.parameter.default.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.destructure.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parameters-declaration</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.destructure.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#flowtype-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parameters-declaration</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>round-brackets</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.group.round.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>short-method</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\*</string>
					<key>name</key>
					<string>keyword.generator.asterisk.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=["'$\w\d])</string>
					<key>contentName</key>
					<string>meta.method.js</string>
					<key>end</key>
					<string>(?=\s*{|;|\n)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>string.quoted.js</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.js</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.js</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>string.quoted.js</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.js</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.js</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?x)
  ((["'])((?:\\.|(?!\2).)*)(\2))  | # string quoted
  (?:\b([_$a-zA-Z][$\w]*)\b)      | # any identifier
  (?:\b(\d+)\b)                     # number-only name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-right-side</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\[)</string>
					<key>contentName</key>
					<string>meta.computed-method.js</string>
					<key>end</key>
					<string>(?=\s*{|;|\n)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#square-brackets</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-right-side</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>square-brackets</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>meta.group.square.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>string-content</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\s*\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\([1-7][0-7]{0,2}|[0-7]{2,3}|[bfnrtv0'"\\]|x\h{2}|u\{\h+\}|u\h{4})</string>
					<key>name</key>
					<string>constant.character.escape.js</string>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(Array|ArrayBuffer|Boolean|DataView|Date|Error|EvalError|Float32Array|Float64Array|Function|Infinity|Int16Array|Int32Array|Int8Array|JSON|Map|Math|NaN|Number|Object|Promise|Proxy|RangeError|ReferenceError|Reflect|RegExp|Set|String|Symbol|SyntaxError|System|TypeError|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray|URIError|WeakMap|WeakSet)\b</string>
					<key>name</key>
					<string>support.class.builtin.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Buffer)\b</string>
					<key>name</key>
					<string>support.class.node.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(constructor|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|hasOwnProperty|isFinite|isNaN|isPrototypeOf|parseFloat|parseInt|propertyIsEnumerable|toLocaleString|toString|undefined|unescape|valueOf)\b</string>
					<key>name</key>
					<string>support.function.builtin.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(clearImmediate|clearInterval|clearTimeout|require|setImmediate|setInterval|setTimeout)\b</string>
					<key>name</key>
					<string>support.function.node.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(document|window)\b</string>
					<key>name</key>
					<string>support.type.object.dom.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(global|GLOBAL|root|__dirname|__filename)\b</string>
					<key>name</key>
					<string>support.type.object.node.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.console.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.console.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(console)(?:(\.)(assert|count|dir|error|group|groupCollapsed|groupEnd|info|log|profile|profileEnd|table|time|timeEnd|trace|warn))?\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.process.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.type.object.process.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>support.function.process.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(process)(?:(\.)(?:(arch|argv|config|env|execArgv|execPath|exitCode|mainModule|pid|platform|stderr|stdin|stdout|title|version|versions)|(abort|chdir|cwd|exit|getgid|getgroups|getuid|hrtime|initgroups|kill|memoryUsage|nextTick|setgid|setgroups|setuid|umask|uptime)))?\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(exports|module(?:(\.)(children|exports|filename|id|loaded|parent)))?\b</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.js</string>
</dict>
</plist>
